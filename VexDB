#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Wed Aug  7 14:11:52 2019

@author: aditichoudhary
"""
import requests
import json
import numpy as np
payload = {'season': 'Turning Point'}
r = requests.get('https://api.vexdb.io/v1/get_rankings', params=payload)
dependents = []
independents = []
x = 0
total = 0
print(r.json()['size'])
while x < 100:
    independents.append([])
    independents[x].append(r.json()['result'][x]['opr'])
    independents[x].append(r.json()['result'][x]['dpr'])
    independents[x].append(r.json()['result'][x]['ccwm'])
    total = total + r.json()['result'][x]['trsp']
    if not r.json()['result'][x]['trsp']/50 == 0:
        actualrank = r.json()['result'][x]['rank']
    else:
        actualrank = r.json()['result'][x]['rank']
    dependents.append(actualrank)
    print(x)
    x = x + 1
total = total/10
y = 0

dependents = np.array(dependents, dtype=np.float32)
independents = np.array(independents, dtype=np.float32)
from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(independents, dependents, test_size = 0.2, random_state = 0)

import keras
from keras.models import Sequential
from keras.layers import Dense
classifier = Sequential()
classifier.add(Dense(units=2, activation="relu", input_dim=3, kernel_initializer="uniform"))
classifier.add(Dense(units=1, activation="relu", kernel_initializer="uniform"))
classifier.compile(optimizer='adam',loss='mean_squared_error', metrics=['accuracy'])
classifier.fit(X_train,y_train,batch_size=100, epochs=10)
